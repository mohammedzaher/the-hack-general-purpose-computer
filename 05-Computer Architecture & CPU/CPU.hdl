// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Mux1out);
    
    Not(in=instruction[15], out=notin15);
    Or(a=notin15, b=instruction[5], out=intoA); // with help
    
    ARegister(in=Mux1out, load=intoA, out=ARegisterout, out[0..14]=addressM); // controlled by d2
    
    Mux16(a=ARegisterout, b=inM, sel=instruction[12], out=MUX2out); // controlled by a
    
    And(a=instruction[4], b=instruction[15], out=intoD); // with help
    DRegister(in=ALUout, load=intoD, out=DRegisterout); // controlled by d1
    
    ALU(x=DRegisterout, y=MUX2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zero, ng=neg);  // controlled by c5c4c3c2c1c0
    And(a=instruction[3], b=instruction[15], out=writeM, out=writeMout);    
    
    // Program Counter Logic
    DMux8Way(in=true, sel=instruction[0..2], a=aa, b=bb, c=cc, d=dd, e=ee, f=ff, g=gg, h=hh);
    Not(in=zero, out=notzero);
    Not(in=neg, out=notneg);
    And(a=notzero, b=notneg, out=a2);
    And(a=a2, b=bb, out=load2);
    And(a=cc, b=zero, out=load3);
    And(a=dd, b=notneg, out=load4);
    And(a=ee, b=neg, out=load5);
    And(a=ff, b=notzero, out=load6);
    Or(a=zero, b=neg, out=a3);
    And(a=gg, b=a3, out=load7);
    Or8Way(in[0]=false,in[1]=load2,in[2]=load3,in[3]=load4,in[4]=load5,in[5]=load6,in[6]=load7,in[7]=hh,out=loador8);
    And(a=loador8, b=instruction[15], out=loadf);
    
    PC(in=ARegisterout, load=loadf, inc=true, reset=reset, out[0..14]=pc);
}